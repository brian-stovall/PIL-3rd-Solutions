local N = 8 -- board size

function permgen (a, n)
  n = n or #a
  if n <= 1 then
   coroutine.yield(a)
  else
    for i = 1, n do
      a[n], a[i] = a[i], a[n]
      permgen(a, n-1)
      a[n], a[i] = a[i], a[n]
    end
  end
end

function permute (a)
  return coroutine.wrap(function () permgen(a) end)
end

--check if (n,c) is free from attacks
local function isplaceok (a, n, c)
	for i = 1, n - 1 do --for the queens already placed
		if (a[i] == c) or --column
			 (a[i] - i == c - n) or --diagonal 1
			 (a[i] + i == c + n) then --diagonal 2
			return false
		end
	end
  return true
end

--printer
local function printScreen(a)
	for i = 1, N do
		for j = 1, N do
			io.write(a[i] == j and "Q" or "-"," ")
		end
		io.write("\n")
	end
	io.write("\n")
end

--tests a solution that is generated by the permutor
function testSol(permArr)
	local testArr = {}
	for i,v in pairs(permArr) do
		if isplaceok(testArr, i, v) then
			table.insert(testArr, v)
		else
			return false
		end
	end
	return true
end

--first build the table to permute
local permArr = {}
for i = 1, N do
	table.insert(permArr, i)
end


for item in permute(permArr) do
	if testSol(item) == true then
		printScreen(item)	
		break
	end
end

